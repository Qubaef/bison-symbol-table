Author: Jakub Fedorowicz
yytext              Token type      Token value

int                 KW_INT          
a                   IDENT           a
;                   ;               
======== FOUND: VAR 'a' ========
float               KW_FLOAT        
a1                  IDENT           a1
,                   ,               
======== FOUND: VAR 'a1' ========
_b                  IDENT           _b
,                   ,               
======== FOUND: VAR '_b' ========
_00                 IDENT           _00
;                   ;               
======== FOUND: VAR '_00' ========
double              KW_DOUBLE       
PI                  IDENT           PI
=                   =               
3.1415926           FLOAT_CONST     3.1415926
;                   ;               
======== FOUND: VAR 'PI' ========
unsigned            KW_UNSIGNED     
char                KW_CHAR         
c                   IDENT           c
;                   ;               
======== FOUND: VAR 'c' ========
int                 KW_INT          
fromASCII           IDENT           fromASCII
=                   =               
128                 INTEGER_CONST   128
,                   ,               
======== FOUND: VAR 'fromASCII' ========
toASCII             IDENT           toASCII
=                   =               
255                 INTEGER_CONST   255
;                   ;               
======== FOUND: VAR 'toASCII' ========
int                 KW_INT          
t                   IDENT           t
[                   [               
10                  INTEGER_CONST   10
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
struct              KW_STRUCT       
data                IDENT           data
{                   {               
int                 KW_INT          
year                IDENT           year
;                   ;               
======== FOUND: VAR 'year' ========
int                 KW_INT          
month               IDENT           month
,                   ,               
======== FOUND: VAR 'month' ========
day                 IDENT           day
;                   ;               
======== FOUND: VAR 'day' ========
}                   }               
======== FOUND: STRUCT  ========
d                   IDENT           d
;                   ;               
======== FOUND: VAR 'd' ========
void                KW_VOID         
EmptyFunction       IDENT           EmptyFunction
(                   (               
void                KW_VOID         
)                   )               
======== FOUND: FUN_HEAD 'EmptyFunction' ========
{                   {               
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'EmptyFunction' ========
int                 KW_INT          
EmptyFunctionWithParIDENT           EmptyFunctionWithParameters
(                   (               
int                 KW_INT          
a                   IDENT           a
======== FOUND: FORM_PARAM 'a' ========
,                   ,               
double              KW_DOUBLE       
d                   IDENT           d
======== FOUND: FORM_PARAM 'd' ========
)                   )               
======== FOUND: FUN_HEAD 'EmptyFunctionWithParameters' ========
{                   {               
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'EmptyFunctionWithParameters' ========
float               KW_FLOAT        
FunctionWithDeclaratIDENT           FunctionWithDeclarationOfVariables
(                   (               
double              KW_DOUBLE       
d                   IDENT           d
======== FOUND: FORM_PARAM 'd' ========
)                   )               
======== FOUND: FUN_HEAD 'FunctionWithDeclarationOfVariables' ========
{                   {               
int                 KW_INT          
a                   IDENT           a
;                   ;               
======== FOUND: VAR 'a' ========
======== FOUND: DECL_LIST  ========
double              KW_DOUBLE       
half                IDENT           half
=                   =               
.5                  FLOAT_CONST     .5
;                   ;               
======== FOUND: VAR 'half' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
t                   IDENT           t
[                   [               
7                   INTEGER_CONST   7
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
======== FOUND: DECL_LIST  ========
struct              KW_STRUCT       
data                IDENT           data
{                   {               
int                 KW_INT          
year                IDENT           year
,                   ,               
======== FOUND: VAR 'year' ========
month               IDENT           month
;                   ;               
======== FOUND: VAR 'month' ========
int                 KW_INT          
day                 IDENT           day
;                   ;               
======== FOUND: VAR 'day' ========
}                   }               
======== FOUND: STRUCT  ========
d1                  IDENT           d1
;                   ;               
======== FOUND: VAR 'd1' ========
======== FOUND: DECL_LIST  ========
FunctionWithDeclaratIDENT           FunctionWithDeclarationOfVariables
(                   (               
half                IDENT           half
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'FunctionWithDeclarationOfVariables' ========
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'FunctionWithDeclarationOfVariables' ========
int                 KW_INT          
x1                  IDENT           x1
=                   =               
fromASCII           IDENT           fromASCII
+                   +               
2                   INTEGER_CONST   2
*                   *               
(                   (               
20                  INTEGER_CONST   20
+                   +               
toASCII             IDENT           toASCII
)                   )               
;                   ;               
======== FOUND: VAR 'x1' ========
double              KW_DOUBLE       
realTest            IDENT           realTest
=                   =               
12.34               FLOAT_CONST     12.34
+                   +               
.56                 FLOAT_CONST     .56
+                   +               
78.                 FLOAT_CONST     78.
;                   ;               
======== FOUND: VAR 'realTest' ========
void                KW_VOID         
main                IDENT           main
(                   (               
void                KW_VOID         
)                   )               
======== FOUND: FUN_HEAD 'main' ========
{                   {               
int                 KW_INT          
a                   IDENT           a
=                   =               
1                   INTEGER_CONST   1
,                   ,               
======== FOUND: VAR 'a' ========
b                   IDENT           b
,                   ,               
======== FOUND: VAR 'b' ========
c                   IDENT           c
,                   ,               
======== FOUND: VAR 'c' ========
m                   IDENT           m
;                   ;               
======== FOUND: VAR 'm' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
t                   IDENT           t
[                   [               
3                   INTEGER_CONST   3
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
test                IDENT           test
;                   ;               
======== FOUND: VAR 'test' ========
======== FOUND: DECL_LIST  ========
struct              KW_STRUCT       
data                IDENT           data
{                   {               
int                 KW_INT          
day                 IDENT           day
,                   ,               
======== FOUND: VAR 'day' ========
month               IDENT           month
,                   ,               
======== FOUND: VAR 'month' ========
year                IDENT           year
;                   ;               
======== FOUND: VAR 'year' ========
}                   }               
======== FOUND: STRUCT  ========
d                   IDENT           d
;                   ;               
======== FOUND: VAR 'd' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
test1               IDENT           test1
[                   [               
10                  INTEGER_CONST   10
]                   ]               
=                   =               
"siema"             STRING_CONST    "siema"
======== FOUND: VAR 'test1' ========
;                   ;               
======== FOUND: DECL_LIST  ========
double              KW_DOUBLE       
symbol_table        IDENT           symbol_table
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: VAR 'symbol_table' ========
ST: WARNING: Mismatched types symbol_table.
======== FOUND: DECL_LIST  ========
test1               IDENT           test1
=                   =               
5                   INTEGER_CONST   5
;                   ;               
======== FOUND: ASSIGNMENT 'test1' ========
ST: WARNING: Mismatched types test1.
main                IDENT           main
=                   =               
10                  INTEGER_CONST   10
;                   ;               
======== FOUND: ASSIGNMENT 'main' ========
ST: ERROR: Symbol is not variable main.
EmptyFunction       IDENT           EmptyFunction
(                   (               
)                   )               
;                   ;               
======== FOUND: FUN_CALL 'EmptyFunction' ========
EmptyFunctionWithParIDENT           EmptyFunctionWithParameters
(                   (               
123.0               FLOAT_CONST     123.0
,                   ,               
======== FOUND: ACT_PARAM  ========
12.34               FLOAT_CONST     12.34
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'EmptyFunctionWithParameters' ========
ST: WARNING: Invalid function parameter type EmptyFunctionWithParameters.
symbol_table        IDENT           symbol_table
=                   =               
0.5                 FLOAT_CONST     0.5
;                   ;               
======== FOUND: ASSIGNMENT 'symbol_table' ========
symbol_table        IDENT           symbol_table
=                   =               
2                   INTEGER_CONST   2
;                   ;               
======== FOUND: ASSIGNMENT 'symbol_table' ========
ST: WARNING: Mismatched types symbol_table.
printf              IDENT           printf
(                   (               
"\n\n\nExtended ASCISTRING_CONST    "\n\n\nExtended ASCII codes\n\n"
======== FOUND: ACT_PARAM  ========
)                   )               
;                   ;               
======== FOUND: FUN_CALL 'printf' ========
ST: ERROR: Undeclared identifier printf.
for                 KW_FOR          
(                   (               
uc                  IDENT           uc
=                   =               
fromASCII           IDENT           fromASCII
;                   ;               
======== FOUND: ASSIGNMENT 'uc' ========
uc                  IDENT           uc
<=                  LE              
toASCII             IDENT           toASCII
;                   ;               
uc1                 IDENT           uc1
++                  INC             
======== FOUND: INCR 'uc1' ========
ST: ERROR: Undeclared identifier uc1.
)                   )               
{                   {               
int                 KW_INT          
a                   IDENT           a
;                   ;               
======== FOUND: VAR 'a' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
t                   IDENT           t
[                   [               
2                   INTEGER_CONST   2
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
======== FOUND: DECL_LIST  ========
t                   IDENT           t
[                   [               
0                   INTEGER_CONST   0
]                   ]               
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: ASSIGNMENT 't' ========
t                   IDENT           t
[                   [               
1                   INTEGER_CONST   1
]                   ]               
=                   =               
t                   IDENT           t
[                   [               
0                   INTEGER_CONST   0
]                   ]               
;                   ;               
======== FOUND: ASSIGNMENT 't' ========
printf              IDENT           printf
(                   (               
"%3d:%2c"           STRING_CONST    "%3d:%2c"
======== FOUND: ACT_PARAM  ========
,                   ,               
uc                  IDENT           uc
,                   ,               
======== FOUND: ACT_PARAM  ========
uc                  IDENT           uc
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'printf' ========
ST: ERROR: Undeclared identifier printf.
printf              IDENT           printf
(                   (               
",%d\n"             STRING_CONST    ",%d\n"
======== FOUND: ACT_PARAM  ========
,                   ,               
t                   IDENT           t
[                   [               
1                   INTEGER_CONST   1
]                   ]               
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'printf' ========
ST: ERROR: Undeclared identifier printf.
d                   IDENT           d
.                   .               
day                 IDENT           day
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: ASSIGNMENT 'd' ========
ST: WARNING: Mismatched types d.
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: FOR_INSTR  ========
if                  KW_IF           
(                   (               
a                   IDENT           a
>                   >               
10                  INTEGER_CONST   10
)                   )               
b                   IDENT           b
=                   =               
a                   IDENT           a
;                   ;               
======== FOUND: ASSIGNMENT 'b' ========
======== FOUND: BLOCK  ========
if                  KW_IF           
======== FOUND: IF_INSTR  ========
(                   (               
a                   IDENT           a
>                   >               
1                   INTEGER_CONST   1
)                   )               
b                   IDENT           b
=                   =               
a                   IDENT           a
;                   ;               
======== FOUND: ASSIGNMENT 'b' ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
b                   IDENT           b
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: ASSIGNMENT 'b' ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
if                  KW_IF           
(                   (               
a                   IDENT           a
>                   >               
b                   IDENT           b
)                   )               
if                  KW_IF           
(                   (               
a                   IDENT           a
>                   >               
c                   IDENT           c
)                   )               
m                   IDENT           m
=                   =               
a                   IDENT           a
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
m                   IDENT           m
=                   =               
c                   IDENT           c
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
if                  KW_IF           
(                   (               
b                   IDENT           b
>                   >               
c                   IDENT           c
)                   )               
m                   IDENT           m
=                   =               
b                   IDENT           b
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
m                   IDENT           m
=                   =               
c                   IDENT           c
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
while               KW_WHILE        
(                   (               
a                   IDENT           a
>                   >               
1                   INTEGER_CONST   1
)                   )               
a                   IDENT           a
=                   =               
a                   IDENT           a
-                   -               
2                   INTEGER_CONST   2
;                   ;               
======== FOUND: ASSIGNMENT 'a' ========
======== FOUND: BLOCK  ========
======== FOUND: WHILE_INSTR  ========
d                   IDENT           d
.                   .               
year                IDENT           year
=                   =               
2010                INTEGER_CONST   2010
;                   ;               
======== FOUND: ASSIGNMENT 'd' ========
ST: WARNING: Mismatched types d.
do                  KW_DO           
{                   {               
a                   IDENT           a
++                  INC             
======== FOUND: INCR 'a' ========
;                   ;               
d                   IDENT           d
.                   .               
year                IDENT           year
++                  INC             
======== FOUND: INCR 'd' ========
ST: ERROR: Unexpected non-numerical expression d.
;                   ;               
}                   }               
======== FOUND: BLOCK  ========
while               KW_WHILE        
(                   (               
a                   IDENT           a
<                   <               
1                   INTEGER_CONST   1
)                   )               
;                   ;               
======== FOUND: DO_WHILE  ========
m                   IDENT           m
=                   =               
a                   IDENT           a
>                   >               
b                   IDENT           b
?                   ?               
(                   (               
a                   IDENT           a
>                   >               
c                   IDENT           c
?                   ?               
a                   IDENT           a
:                   :               
c                   IDENT           c
)                   )               
======== FOUND: COND_EXPR  ========
:                   :               
(                   (               
b                   IDENT           b
>                   >               
c                   IDENT           c
?                   ?               
b                   IDENT           b
:                   :               
c                   IDENT           c
)                   )               
======== FOUND: COND_EXPR  ========
;                   ;               
======== FOUND: COND_EXPR  ========
======== FOUND: ASSIGNMENT 'm' ========
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'main' ========
Scope level: 0
0:
<NULL>
1:
[entryType: 1, ident: toASCII, type 1]
<NULL>
2:
[entryType: 1, ident: fromASCII, type 1]
<NULL>
3:
<NULL>
4:
[entryType: 1, ident: _00, type 2]
<NULL>
5:
<NULL>
6:
[entryType: 1, ident: a, type 1]
[entryType: 1, ident: _b, type 2]
<NULL>
7:
[entryType: 1, ident: a1, type 2]
<NULL>
8:
[entryType: 1, ident: c, type 1]
<NULL>
9:
[entryType: 1, ident: t, type 11]
[entryType: 1, ident: d, type 3]
[entryType: 1, ident: realTest, type 2]
<NULL>
10:
[entryType: 3, ident: struct, type 0]
  Scope level: 1
  0:
  <NULL>
  1:
  <NULL>
  2:
  <NULL>
  3:
  [entryType: 1, ident: day, type 1]
  <NULL>
  4:
  <NULL>
  5:
  <NULL>
  6:
  [entryType: 1, ident: year, type 1]
  <NULL>
  7:
  <NULL>
  8:
  <NULL>
  9:
  <NULL>
  10:
  <NULL>
  11:
  [entryType: 1, ident: month, type 1]
  <NULL>
  12:
  <NULL>
  13:
  <NULL>
  14:
  <NULL>
  15:
  <NULL>
[entryType: 2, ident: EmptyFunction, type 3]
[params: ]
  Scope level: 1
  0:
  <NULL>
  1:
  <NULL>
  2:
  <NULL>
  3:
  <NULL>
  4:
  <NULL>
  5:
  <NULL>
  6:
  <NULL>
  7:
  <NULL>
  8:
  <NULL>
  9:
  <NULL>
  10:
  <NULL>
  11:
  <NULL>
  12:
  <NULL>
  13:
  <NULL>
  14:
  <NULL>
  15:
  <NULL>
[entryType: 2, ident: EmptyFunctionWithParameters, type 2]
[params: 1 2 ]
  Scope level: 1
  0:
  <NULL>
  1:
  <NULL>
  2:
  <NULL>
  3:
  <NULL>
  4:
  <NULL>
  5:
  <NULL>
  6:
  [entryType: 1, ident: a, type 1]
  <NULL>
  7:
  <NULL>
  8:
  <NULL>
  9:
  [entryType: 1, ident: d, type 2]
  <NULL>
  10:
  <NULL>
  11:
  <NULL>
  12:
  <NULL>
  13:
  <NULL>
  14:
  <NULL>
  15:
  <NULL>
[entryType: 2, ident: main, type 2]
[params: ]
  Scope level: 1
  0:
  <NULL>
  1:
  <NULL>
  2:
  [entryType: 1, ident: m, type 1]
  [entryType: 1, ident: symbol_table, type 2]
  <NULL>
  3:
  <NULL>
  4:
  <NULL>
  5:
  [entryType: 1, ident: test, type 1]
  <NULL>
  6:
  [entryType: 1, ident: a, type 1]
  [entryType: 1, ident: test1, type 11]
  <NULL>
  7:
  [entryType: 1, ident: b, type 1]
  <NULL>
  8:
  [entryType: 1, ident: c, type 1]
  <NULL>
  9:
  [entryType: 1, ident: t, type 11]
  [entryType: 1, ident: d, type 3]
  <NULL>
  10:
  [entryType: 3, ident: struct, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    [entryType: 1, ident: day, type 1]
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    [entryType: 1, ident: year, type 1]
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    [entryType: 1, ident: month, type 1]
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  <NULL>
  11:
  [entryType: 0, ident: f, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    [entryType: 1, ident: a, type 1]
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    [entryType: 1, ident: t, type 11]
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    [entryType: 1, ident: uc, type 1]
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  <NULL>
  12:
  [entryType: 0, ident: w, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  [entryType: 0, ident: w, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  <NULL>
  13:
  <NULL>
  14:
  [entryType: 0, ident: i, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  [entryType: 0, ident: i, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  [entryType: 0, ident: i, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  [entryType: 0, ident: i, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    [entryType: 0, ident: i, type 0]
      Scope level: 3
      0:
      <NULL>
      1:
      <NULL>
      2:
      <NULL>
      3:
      <NULL>
      4:
      <NULL>
      5:
      <NULL>
      6:
      <NULL>
      7:
      <NULL>
      8:
      <NULL>
      9:
      <NULL>
      10:
      <NULL>
      11:
      <NULL>
      12:
      <NULL>
      13:
      <NULL>
      14:
      <NULL>
      15:
      <NULL>
    [entryType: 0, ident: i, type 0]
      Scope level: 3
      0:
      <NULL>
      1:
      <NULL>
      2:
      <NULL>
      3:
      <NULL>
      4:
      <NULL>
      5:
      <NULL>
      6:
      <NULL>
      7:
      <NULL>
      8:
      <NULL>
      9:
      <NULL>
      10:
      <NULL>
      11:
      <NULL>
      12:
      <NULL>
      13:
      <NULL>
      14:
      <NULL>
      15:
      <NULL>
    <NULL>
    15:
    <NULL>
  [entryType: 0, ident: i, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    [entryType: 0, ident: i, type 0]
      Scope level: 3
      0:
      <NULL>
      1:
      <NULL>
      2:
      <NULL>
      3:
      <NULL>
      4:
      <NULL>
      5:
      <NULL>
      6:
      <NULL>
      7:
      <NULL>
      8:
      <NULL>
      9:
      <NULL>
      10:
      <NULL>
      11:
      <NULL>
      12:
      <NULL>
      13:
      <NULL>
      14:
      <NULL>
      15:
      <NULL>
    [entryType: 0, ident: i, type 0]
      Scope level: 3
      0:
      <NULL>
      1:
      <NULL>
      2:
      <NULL>
      3:
      <NULL>
      4:
      <NULL>
      5:
      <NULL>
      6:
      <NULL>
      7:
      <NULL>
      8:
      <NULL>
      9:
      <NULL>
      10:
      <NULL>
      11:
      <NULL>
      12:
      <NULL>
      13:
      <NULL>
      14:
      <NULL>
      15:
      <NULL>
    <NULL>
    15:
    <NULL>
  <NULL>
  15:
  <NULL>
<NULL>
11:
[entryType: 2, ident: FunctionWithDeclarationOfVariables, type 2]
[params: 2 ]
  Scope level: 1
  0:
  [entryType: 1, ident: half, type 2]
  <NULL>
  1:
  <NULL>
  2:
  <NULL>
  3:
  <NULL>
  4:
  <NULL>
  5:
  <NULL>
  6:
  [entryType: 1, ident: a, type 1]
  <NULL>
  7:
  <NULL>
  8:
  <NULL>
  9:
  [entryType: 1, ident: d, type 2]
  [entryType: 1, ident: t, type 11]
  <NULL>
  10:
  [entryType: 3, ident: struct, type 0]
    Scope level: 2
    0:
    <NULL>
    1:
    <NULL>
    2:
    <NULL>
    3:
    [entryType: 1, ident: day, type 1]
    <NULL>
    4:
    <NULL>
    5:
    <NULL>
    6:
    [entryType: 1, ident: year, type 1]
    <NULL>
    7:
    <NULL>
    8:
    <NULL>
    9:
    <NULL>
    10:
    <NULL>
    11:
    [entryType: 1, ident: month, type 1]
    <NULL>
    12:
    <NULL>
    13:
    <NULL>
    14:
    <NULL>
    15:
    <NULL>
  [entryType: 1, ident: d1, type 3]
  <NULL>
  11:
  <NULL>
  12:
  <NULL>
  13:
  <NULL>
  14:
  <NULL>
  15:
  <NULL>
<NULL>
12:
<NULL>
13:
<NULL>
14:
[entryType: 1, ident: PI, type 2]
[entryType: 1, ident: x1, type 1]
<NULL>
15:
<NULL>
